// This is your Prisma schema file for PostgreSQL production,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // Added for authentication
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth credentials
  accCredentials    AccCredentials?
  procoreCredentials ProcoreCredentials?
  reviztoCredentials ReviztoCredentials?

  // Project mappings
  projectMappings ProjectMapping[]
  
  // User's syncs
  syncs Sync[]

  @@map("users")
}

model AccCredentials {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Client credentials (stored by user)
  clientId     String?
  clientSecret String?
  
  // OAuth tokens (generated through OAuth flow)
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  
  // Base URL is hardcoded for all customers
  baseUrl      String @default("https://developer.api.autodesk.com")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("acc_credentials")
}

model ProcoreCredentials {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Client credentials (stored by user)
  clientId     String?
  clientSecret String?
  
  // OAuth tokens (generated through OAuth flow)
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  
  // Base URL is hardcoded for all customers
  baseUrl      String @default("https://api.procore.com")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("procore_credentials")
}

model ReviztoCredentials {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Client credentials (stored by user)
  clientId     String?
  clientSecret String?
  
  // OAuth tokens (generated through OAuth flow)
  accessToken  String
  refreshToken String?
  expiresAt    DateTime
  
  // Base URL is hardcoded for all customers
  baseUrl      String @default("https://developer.revizto.com")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("revizto_credentials")
}

model ProjectMapping {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  accProjectId     String
  accProjectName   String
  procoreProjectId String
  procoreProjectName String
  
  isActive Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Issue crosswalks for this project mapping
  issueCrosswalks IssueCrosswalk[]
  
  // Sync logs for this project mapping
  syncLogs SyncLog[]

  @@unique([userId, accProjectId, procoreProjectId])
  @@map("project_mappings")
}

model IssueCrosswalk {
  id        String   @id @default(cuid())
  projectMappingId String
  projectMapping   ProjectMapping @relation(fields: [projectMappingId], references: [id], onDelete: Cascade)
  
  accIssueId     String
  procoreIssueId String
  
  lastSyncedAt DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([projectMappingId, accIssueId])
  @@map("issue_crosswalks")
}

model SyncLog {
  id        String   @id @default(cuid())
  userId    String
  projectMappingId String
  projectMapping   ProjectMapping @relation(fields: [projectMappingId], references: [id], onDelete: Cascade)
  
  syncType    String // "full" | "incremental"
  status      String // "success" | "error" | "partial"
  issuesProcessed Int
  issuesCreated   Int
  issuesUpdated   Int
  errors         Json?
  
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  @@map("sync_logs")
}

model Sync {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  
  // Source system configuration
  sourceSystem     String // "acc" | "procore" | "revizto" | etc.
  sourceProjectId  String
  sourceProjectName String
  sourceDataTypes  Json // ["issues", "rfis", "submittals"]
  
  // Destination system configuration  
  destinationSystem     String // "acc" | "procore" | "revizto" | etc.
  destinationProjectId  String
  destinationProjectName String
  destinationCompanyId  String? // For Procore, the company ID
  destinationDataTypes  Json // ["issues", "rfis", "submittals"]
  
  // Sync configuration
  status String @default("draft") // "draft" | "active" | "paused" | "error"
  
  // Scheduling
  scheduleType String @default("manual") // "manual" | "hourly" | "daily" | "weekly"
  scheduleValue String? // "1" for hourly, "2" for every 2 hours, etc.
  
  // Last run information
  lastRunAt    DateTime?
  lastRunStatus String? // "success" | "error" | "partial"
  nextRunAt    DateTime?
  
  // Field mappings (stored as JSON)
  fieldMappings Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("syncs")
}
